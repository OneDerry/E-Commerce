// Datasource & Generator
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core Models
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  phone         String?
  passwordHash  String
  isAdmin       Boolean   @default(false)
  addresses     Address[]
  orders        Order[]
  reviews       Review[]
  wishlists     Wishlist[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Address {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  line1     String
  line2     String?
  city      String
  country   String
  postal    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        String    @id @default(cuid())
  name      String
  slug      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id          String          @id @default(cuid())
  sku         String          @unique
  name        String
  slug        String          @unique
  description String
  priceCents  Int
  images      Json
  categoryId  String
  category    Category        @relation(fields: [categoryId], references: [id])
  variants    ProductVariant[]
  inventory   Inventory?
  reviews     Review[]
  orderItems  OrderItem[]
  wishlists   Wishlist[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  @@index([createdAt])
  @@index([priceCents])
}

model ProductVariant {
  id         String  @id @default(cuid())
  productId  String
  product    Product @relation(fields: [productId], references: [id])
  name       String
  sku        String  @unique
  priceCents Int
}

model Inventory {
  id           String   @id @default(cuid())
  productId    String   @unique
  product      Product  @relation(fields: [productId], references: [id])
  inStock      Int      @default(0)
  reserved     Int      @default(0)
  updatedAt    DateTime @updatedAt
}

model Order {
  id             String      @id @default(cuid())
  userId         String
  user           User        @relation(fields: [userId], references: [id])
  status         OrderStatus @default(pending)
  paymentStatus  PaymentStatus @default(pending)
  totalCents     Int
  subtotalCents  Int
  shippingCents  Int
  currency       String      @default("USD")
  items          OrderItem[]
  payment        Payment?
  shippingAddr   String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model OrderItem {
  id         String  @id @default(cuid())
  orderId    String
  order      Order   @relation(fields: [orderId], references: [id])
  productId  String
  product    Product @relation(fields: [productId], references: [id])
  quantity   Int
  unitPriceCents Int
}

model Payment {
  id             String   @id @default(cuid())
  orderId        String   @unique
  order          Order    @relation(fields: [orderId], references: [id])
  provider       String   // stripe | paystack
  providerRef    String?  // intent id or reference
  amountCents    Int
  currency       String
  status         PaymentStatus
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int
  comment   String
  createdAt DateTime @default(now())
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  @@unique([userId, productId])
}

model Event {
  id          String   @id @default(cuid())
  name        String
  category    String
  payload     Json
  userId      String?
  sessionId   String?
  createdAt   DateTime @default(now())
}

enum OrderStatus {
  pending
  processing
  shipped
  delivered
  cancelled
}

enum PaymentStatus {
  pending
  completed
  failed
  refunded
}


